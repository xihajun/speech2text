今天我们介绍一个新的Agent框架
其实Agent发展了很长时间
之前我们介绍过微软的AutoGen、清华的Chad Dave
国内还有Meta GBT等等以及Agent类
这些的话框架层出不迭
今天我们要介绍的CreatAR的这个新型Agent
它要比微软的AutoGen的话更能应对一些复杂情况
比这个清华的Chad Dave更加的能够灵活自定义
它支持使用OLAMA来调用本地的大模型
这个的话因为很多其他大模型大多都支持Chad GBT
支持Open add 但是不支持本地
这个它第一次引入本地的大模型调用
然后第二个的话就通过它可以实现像旅游的Agent
股票分析的Agent等等
我们下面来介绍一下它的一些个这个项目的特点吧
就先针对这个项目的话我们来介绍一下它的特点
这个项目的话就是说这个Agent的话
它其实本质跟咱们以前介绍的多Agent是一样的
它也是解决这个多Agent的问题
那么为什么选择它呢
它有一些个自己的优势啊
就是说安装起来它有什么优势呢
我们看一下它代码
我就直接给大家看一下简单看一下它的代码
比如这是它的代码
这是一个Python程序
然后比如说你把你的API-K配在这里
你如果用本地化模型的话
就把它注视掉
然后直接用这行就行了
From Long-Trend RMS Imports Orama
Orama是什么东西啊
它是就是说你本地安装一个软件
这个它主要是针对苹果电脑的
如果你有苹果电脑的话
你装一个这个软件
装了之后的话
在本地相当于把一些个模型参数下载下来
你可以理解为它是一个模型参数的一个聚合器啊
然后的话再通过它的话
你就可以跟这个大模型去聊天了
然后的话就说你要调用它的时候
因为它就会在你的本地服务里面
那么未来当你要去调用它的时候
只需要这样Orama
然后model等于什么什么就可以了
当然它也支持命令行那种就是访问方式啊
然后的话这个完成之后的话
你就可以From it底下的话
我们看一下定义啊
比如这里它的角色定义很简单
一个是角色
角色就是agent
然后比如说ro
啊ro什么呢
它是一个这个终极啊
research分析师
目标什么
然后背景信息
它的背景是什么
就这个角色的背景
然后再有到底下这个vibos
它处就输出它的这个日制信息
然后allow deletion
这个非常重要
这是它一个特色
我们我们看一下这个东西啊
这是这个项目的一个非常特色的地方
这个东西代表的是是否跟其他的agent有交互啊
是否要跟其他agent进行一个协同
这里的话是false
是不跟其他agent进行一个交互协同的
然后这里还有工具
你可以引入一个search的search工具
ok
然后底下是另外有writer的
上面是研究员
下面是一个writer
然后这个技术的一个内容啊
这个分析师啊
策略师吧
然后的话底下目标是输写这个比较好的一些内容啊
前沿的内容
然后背景是你是一个什么什么
然后的话这里有vibos的日制信息输出
然后是否允许跟其他的交互
然后这里写的是允许啊
然后创建任务
然后我们可以看到上面是agent定义
下面是任务
比如task
任务description ESN
然后task description ESN
对吧
我们以前用的其他框架的他的task
他的agent
他的task定义的时候
其实已经把agent和业务流放在task里面了
但这个项目最大特点
它把角色和task分开了
这是它最大的特点
那么角色和任务分开之后会带来什么影响
我们下面来说一下
那么分开之后的话
这里定义了两个任务
那两个任务
这里还可以定义这个任务用哪个agent
对吧
这个已经定义完了
那么它下面还有一个解任务的执行
相当于执行这个任务的一个控制流
相当于分得更细了
那么的话这里有agent参与有两个
然后task有两个
这两个task任务
那么这个日制的话是有对应的日制
然后的话最后有一个对应的结果
这个项目最大的特点是
当然就是说我们先看一下吧
最大的特点我认为就是说在哪里
在这个地方
它官方也说了它的特点了
在这个地方
它要比autogen
就autogen虽然能创建这种协同工作的这种对话代理
多代理
但它缺乏对过程的内在的一些概念
比如说在autogen里面的话
你要编排这种agent之间的交互
是需要额外这些编程的
就是说白了你还得编程一些东西
随着任务规模的增长的话
这个可能会变得非常的复杂和繁琐
什么意思呢
比如咱们在autogen里面就是要做一个
比如说要对代理之间要交互
比如这两个代理
这两个agent之间
比如agent
这个协手这个agent
要和research agent之间要
它两个交互的话
你还得写代码
然后就编程很多代码
那么在这个项目里面
它其实它不用了
它还很巧妙的通过这个东西
推过Allow delegation这个东西
通过这个变量
来控制他们之间是否要交互
这个就相当于是它最大的一个特色
然后所以它使得比如说两个角色之间
是否可以调用外部角色的话
就变得非常的容易
然后Chad Dave这里的话
Chad Dave的话相对来说它比较固化
那么这个项目其实要比Chad Dave的话
要更加的灵活一些
比如它的任务的定义
还有对应的task的
还有agent的定义
它都是完全分开的
然后与其agent之间的这种交互
它也是分开
它也拆开的
那么底下还有相关的一个任务控制
所以的话这个是它的一个特色
我们要了解一下
就是说在我看来
这个项目最大的特色
就是它引入了Low delegation
就是说师傅
这个角色是否跟外部交互
跟外部的其他的agent
其他的代理是否要交互
角色代理是否要交互
这是它最大的特色
OK 然后再到我们看官方的一个介绍特点
比如基于角色代理设计
根据特定角色目标工具定制代理
我们刚才看到它上面有三个
一个是agent定义
一个是任务定义
还有agent里面有对用的
这个上面还有个工具定义task
就是这个agent是否要使用工具
它能调用哪些工具
这里的话相当在agent里面定义
这三个东西它都支持的
然后再有就是说自主的这个互代理
就代理可以自主委派任务
并互相查询提高问题的解决效率
这个的话它是可以控制的
就代理的话就可以委派任务
并相互查询
这个它的一个特色
然后再有就是说灵活的任务管理
可使用可定制的工具自定义任务
并动态的分配给这个agent
就说白了因为它的这个工具
就是说是在agent这个定义里面的
那么agent的话就是说
你在定义agent的时候
就决定它是否可以用这个工具
那么以前咱们不是这样
以前咱是放在一个就是说相当集合里面
比如说我工具也放好了
我的这个agent有这么多
工具有这么多
然后的话这个时候我扔给你
你大母亲你去帮我去分析
基于这些东西你去分析一下
你该怎么执行12345678
但它这个项目的好处
就是它引入了一个相当就说
引入了这些个像agent task
它就它有个过程控制
有个相当你在里面可以做一些过程控制
这是它的一个架构图
最后一个就是流程驱动
它目前只支持这个顺序任务执行
但未来可能它会增加一些个复杂的这个层级的流程
比如说我们看它的架构
这块有agent
这个agent的话主要负责这个解决一些问题
比如说这个agent的话就相互的
比如说两个agent之间
比如说角色扮演的aiagent
那么这个agent的话
要看它有背景相关信息的一个定义
agent和agent之间是可以相互调用
然后这个agent的话再去执行对应的任务
然后再根据任务的话
就任务里面包含了秒数
是否要使用工具
以及agent的定义都可以在任务里面你再去定义
就它是非常灵活
我认为它是非常灵活
就是说你在任务里面把这个工具和agent也可以定义
那么在agent里面
其实也可以定义工具
所以这个很有意思
这个是双向的
然后再有一个就是说
它的一个处理的流程
流程驱动这里的话
就是说可以去做一些个自定义
目前的话它只支持这个顺序执行
未来它可以
未来它们在未来的开发一些复杂的
其他的更复杂一些流程控制
然后官方也提供了几个例子
我们可以运行一下它这个代码
在运行的时候你第一步要安装它
pubin install
第一步要安装
安装了之后的话
因为我已经安装过非常快
然后把这两个依赖安装一下
安装完之后的话就把这个代码
这个代码就可执行
你这个代码放在这个python文件里面就好了
比如说我的话已经放好了
比如X的这个
大家看到了吧
我已经放好了对应的这个文件
我已经放好了
就是你把这个APRK换成自己的APRK就好了
然后底下就是刚才说的那些个代码
比如这里是定义你的agent的角色
然后创建这个任务
然后底下再有这个
就初始化你的career
我用一个顺序执行的一个案例
比如说任务这里task这里task1task2
它这个是顺序
是1就是1
2就是2
任务以来它会支持一些个
可能其他顺序的
其他顺序的一些个
就是你可以把这个顺序
比如说可以有一些个
比如说嵌套循环什么的
我记得好像是原先在一些个其他的agent里面
它有些是支持这种嵌套循环的
我记得那个agents就支持这个东西
OK
然后我们再回归到这个
就是支持这个
然后我们可以执行运行一下它
运行其实很简单
你python.py
然后我们可以跑一下它
这个项目的话
就是它这个时候
它就开始进入一个careeragent的一个执行链
执行的串
对吧
然后就是说这个它是
然后这里的话开始有action
是这个search
这个查询
然后这action input
latest advice in ai
这个lns什么的
然后就它一会
它就会给你执行出对应
按照一步步它就会执行出来
就是说它这个目标
这个的话是做一个
相当于有时候我看一下
我们看一下它的任务
它这个任务是
conduct a comprehensive analysis
最近的一些个AR
在2024年最近AR的一些个
像趋势啦
最新的技术一些个
要把这些东西做一个报告分析出来
比如说我们看一下
它这里它就已经分析出一些东西了
比如说latest advice
在lns最新的
然后完完周的话
观察它的一些个
就是lns的
就是说一些观察
然后再生成这个advancement lns
然后底下再有等等等等
它一步步这样就执行了
然后再打开open source AR
这个advance的lns
它这样一个一个执行好吧
OK
然后这样我就不细看完了
然后官方也提供了几个
特定场景的例子
特定场景例子是在
另外一个代码仓库里面
在这个代码提供了一个旅行的一个代码
旅行的一个player
股票的以及这个
登陆业生成的这么三个例子
你也可以根据自己的情况来自定义
你也可以自定义
比如说用原先的这个
就是框架代码
用框架代码去做一些个
就是相当于构建这个agent
然后从而能形成各种
这针对不同任务
比如说我可以把这个agent
用在这个任务里面
然后可以就是稍微稍微把任务改一改
可以用在另外一个任务里面
我们可以看一下这个triple player的这个代码
比如triple player的这个
triple player比如说它分为一个triple agent
这个文件是定agent
他把agent的定义任务的定义把它拆开了
相当形成一个框架性的一个思路了
比如这个agent的定义
这里有这个agent的一个角色
然后再有这个底下等等
有三个角色
有这个城市选择的agent
有当地的专家
旅游的concentrator
就是这个旅游跟踪的这个人
就相当于有这个
就是总结的这个
然后的话再有这个任务
这边有任务
这个定义的任务
然后任务描述
然后再有这个gazer task
editator task
有不同的任务
然后的话这里综合的话
会在综合这个文件里面
然后你要运行这个代码这样的
你需要把这个.env这个文件的话改一下
首先要重命名
把它重命名一下
变成一个.env
重命名之后的话
把这几个参数配一下
一个是support_iprk
要把它注册一下
这个是一个
我觉得是一个搜索的一个.iprk
然后这里的话browse_iprk也注册一下
然后openr的.oprk的话也注册一下
因为这三个工具都会用到
工具里面就是有比如browse的
就是计算器的
还有search的
search这个可能
这个和这个browse的这两个
会用到那个.iprk
所以你需要把那个.iprk
这几个.iprk对用网址要注册下来
把它配置好
配置好的话你运行的时候就是
直接又运行它就好了
made.py就好了
就是python到这个目录底下
python made.py就可以跑起来了
然后它还提供了股票分析的agent
有股票分析的分析的agent的角色定义
比如金融分析师
就是research研究分析师
还有投资专家
投资顾问
然后底下再有分析的相关任务
然后的话你在定义
这里有个自定义的
你又可以根据它整个的
这个里面是放工具的
你也可以自定义一些工具放在里面
这个的话其实是构建agent的一个
最简单的一个相当给你得演示的一些框架
好吧
然后这块还有灯笼月生成的等等
这个我就不演示了
然后因为时间有限
我们今天讲解就到这里
这个项目我认为它确实有些特色
它最大来给我
从我的视觉上
从我的历史的一些
看了一些agent框架来说的话
最大的特色就是采用了刚才说的
相互两个代理之间的这种
相互的一个市府可以交互的这块的一个控制
这个是它最大一个特色
其实其他一些点
你比如它官方列了好几个它的特点
我找一下
它官方列了这么多特点
比如说角色
这个定义什么的自动
切入的这个deligent
然后flexible的任务的管理
还有这个顺序执行
这个还没实现
说实话这个当然有
这个当然有
但是就是说它其实有很多其他项目
人家可能也做得很好
然后就是自主护理
这两个应该是它最大的一个特色
这两个
一个是代理可以自主委派任务并相互查询
另外一个就是灵活的任务管理
这两个是它最大的一个特色
也就是说代理和任务之间是多对多的
是N对N的
这个是它最大的特点
OK
好
我们今天关于这个项目的讲解就到这里
希望对大家有些启发
因为这个项目确实是最近在agent
这个整个框架市场里面有一些个新的创新
也希望对大家有些启发
谢谢大家
